import time
from datetime import datetime

import requests
from pytz import country_names

from comtrade.config import URL_YEAR
from comtrade.functions import create_table
from comtrade.orm import set_plan_request, set_world_statistic

country_list = [4, 156, 276, 792, ]
headers = {
    'Cache-Control': 'no-cache',
    'Ocp-Apim-Subscription-Key': "d02d409186ff4ffe88b266538ed9eb6c",
}
# 5.3) Создаем параметры запроса
hs_list = [
    '01,02,03,04,05',
    '06,07,08,09,10',
    '11,12,13,14,15',
    '16,17,18,19',
    '20,21,22',
    '23,24',
    '25,26,27',
    '28',
    '2901,2902,2903,2904,2905,2906,2907,2908,2909,2910,2911',
    '2912,2913,2914,2915,2916,2917,2918,2919,2920,2921',
    '2922,2923,2924,2925,2926,2927,2928,2929,2930,2931,2932,2933,2934,2935,2936,2937,2938,2939,2940,2941,2942',
    '30',
    '31',
    '32',
    '33',
    '34',
    '36',
    '35,37,38',
    '3901,3902,3903,3904',
    '3905,3906,3907',
    '3908,3909,3910,3911,3912,3913',
    '3914,3915,3916',
    '3917,3918,3919,3920',
    '3921,3922,3923',
    '3924,3925,3926',
    '4001,4002,4003,4004,4005,4006,4007,4008,4009',
    '4010,4011,4012,4013',
    '4014,4015,4016,4017',
    '41,42,43',
    '44,45,46,47',
    '4801,4802,4803,4804,4805,4806',
    '4807,4808,4809,4810,4811,4812',
    '4813,4814,4815,4816,4817,4818,4819,4820,4821,4822,4823',
    '49,50,51,52,53',
    '54',
    '55',
    '56,57',
    '58,59',
    '60',
    '6101,6102,6103',
    '6104,6105',
    '6106,6107,6108,6109',
    '6110,6111,6112,6113',
    '6114,6115,6116,6117',
    '6201,6202',
    '6203',
    '6204',
    '6205,6206,6207,6208,6209',
    '6210,6211,6212,6213',
    '6214,6215,6216,6217',
    '63',
    '64',
    '65,66,67',
    '68',
    '69,71',
    '70',
    '7201,7202,7203,7204,7205,7206,7207,7208,7209,7210,7211,7212,7213,7214,7215',
    '7216,7217,7218,7219,7220,7221,7222,7223,7224,7225,7226,7227,7228,7229',
    '7301,7302,7303,7304,7305,7306,7307',
    '7308,7309,7310,7311,7312,7313',
    '7314,7315,7316,7317',
    '7318,7319,7320',
    '7321,7322,7323',
    '7324,7325,7326',
    '74,75',
    '76',
    '77,78,79,80,81',
    '8201,8202,8203,8204,8205',
    '8206,8207,8208,8209,8210',
    '8211,8212,8213,8214,8215',
    '8301,8302,8303,8304,8305',
    '8306,8307,8308,8309,8310,8311',
    '8401,8402,8403,8404,8405,8406,8407,8408',
    '8409,8410,8411,8412',
    '8413',
    '8414',
    '8415,8416',
    '8417,8418,8419,8420',
    '8421,8422,8423,8424',
    '8425,8426,8427,8428,8429,8430,8431,8432',
    '8433,8434,8435,8436,8437,8438,8439,8440',
    '8441,8442,8443,8444,8445,8446,8447,8448',
    '8449,8450,8451,8452,8453,8454,8455,8456,8457,8458,8459,8460,8461,8462,8463,8464',
    '8465,8466,8467,8468',
    '8469,8470,8471,8472',
    '8473,8474,8475,8476,8477,8478,8479,8480',
    '8481',
    '8482',
    '8483,8484',
    '8485,8486,8487',
    '8501,8502,8503,8504,8505',
    '8506,8507,8508,8509',
    '8510,8511,8512,8513',
    '8514,8515',
    '8516',
    '8517',
    '8518,8519,8520,8521,8522,8523,8524,8525,8526',
    '8527,8528,8529,8530,8531,8532,8533,8534',
    '8535,8536',
    '8537,8538',
    '8539,8540,8541,8542',
    '8543,8544,8545',
    '8546,8547,8548,8549',
    '8701,8702,8703,8704',
    '8705,8706',
    '8707',
    '870810,870821,870822,870829,870830,870831,870839,870840,870850',
    '870860,870870,870880,870891,870892,870893,870894,870895,870899',
    '8709,8710,8711,8712,8713,8714,8715,8716',
    '86,88,89,91,92,93',
    '9001,9002,9003,9004,9005,9006,9007,9008,9009',
    '9010,9011,9012,9013,9014,9015,9016,9017',
    '9018,9019,9020,9021,9022,9023,9024,9025',
    '9026,9027,9028,9029',
    '9030,9031,9032,9033',
    '9401,9402,9403',
    '9404,9405,9406',
    '96',
    '95,97,98,99',
]

country = 156
create_table()
for i_hs in hs_list:
    time.sleep(33)
    dataset_checksum = country
    params = {
        "reporterCode": str(country),
        "period": "2023",
        "cmdCode": i_hs,
    }
    new_row = {
        "updated_at": datetime.now(),
        "is_active": True,
        "dataset_checksum": dataset_checksum,
        "params": str(params),
        "status_code": 0,
        "count_row": 0,
    }

    params.update(
        {
            "maxRecords": "100000",
            "format": "JSON",
            "breakdownMode": "classic",
            "includeDesc": True,
        }
    )

    print(params)

    response = requests.get(URL_YEAR, params=params, headers=headers)
    r_json = response.json()
    new_row['status_code'] = response.status_code
    new_row['count_row'] = r_json.get('count', 0)

    # for i in r_json.get('data'):
    #     print(i)

    print(new_row)
    if new_row.get('count_row') < 100_000:
        set_world_statistic(r_json, dataset_checksum)
    set_plan_request(new_row)
